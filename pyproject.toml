[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project]
name = "scrapyrt"
version = "0.17.0"
description = "Put Scrapy spiders behind an HTTP API"
dependencies = [
    "scrapy>=2.7",
    "packaging>=20.0",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: No Input/Output (Daemon)",
    "Framework :: Scrapy",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
license = "BSD-3-Clause"
readme = "README.rst"
requires-python = ">=3.9"
authors = [{ name = "Scrapinghub", email = "opensource@zyte.com" }]
maintainers = [{ name = "Scrapinghub", email = "opensource@zyte.com" }]

[project.urls]
Documentation = "https://scrapyrt.readthedocs.io/en/latest/index.html"
Source = "https://github.com/scrapinghub/scrapyrt"
Tracker = "https://github.com/scrapinghub/scrapyrt/issues"
"Release notes" = "https://scrapyrt.readthedocs.io/en/latest/changes.html"

[project.scripts]
scrapyrt = "scrapyrt.cmdline:execute"

[tool.bumpversion]
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "CHANGES.rst"
search = "\\(unreleased\\)$"
replace = "({now:%Y-%m-%d})"
regex = true

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'release = "{current_version}"'
replace = 'release = "{new_version}"'

[[tool.bumpversion.files]]
filename = "docs/conf.py"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)"
serialize = ["{major}.{minor}"]
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
regex = true

[tool.coverage.run]
# https://coverage.readthedocs.io/en/latest/subprocess.html
parallel = true
sigterm = true

[tool.mypy]
check_untyped_defs = true

[tool.pylint.MASTER]
persistent = "no"
load-plugins=[
    "pylint_per_file_ignores",
]

[tool.pylint."MESSAGES CONTROL"]
enable = [
    "useless-suppression",
]
# Ruff handles: line-too-long, too-many-arguments (PLR0913)
# mypy handles: no-member
# invalid-name disabled because it causes a couple of false positives that do
# not seem ignorable.
disable = [
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-member",
    "too-many-arguments",
]
per-file-ignores = [
    "docs/conf.py:invalid-name",
    "/tests/:broad-exception-caught,consider-using-with,import-outside-toplevel,invalid-name,no-member,pointless-statement,protected-access,redefined-outer-name,reimported,too-many-instance-attributes,too-many-positional-arguments,unused-argument",
]

[tool.pytest.ini_options]
python_files = ["test_*.py", "test_*/__init__.py"]

[tool.ruff.lint]
extend-select = [
    # flake8-builtins
    "A",
    # flake8-async
    "ASYNC",
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # flake8-commas
    "COM",
    # pydocstyle
    "D",
    # flake8-future-annotations
    "FA",
    # flynt
    "FLY",
    # refurb
    "FURB",
    # isort
    "I",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging
    "LOG",
    # Perflint
    "PERF",
    # pygrep-hooks
    "PGH",
    # flake8-pie
    "PIE",
    # pylint
    "PL",
    # flake8-pytest-style
    "PT",
    # flake8-use-pathlib
    "PTH",
    # flake8-pyi
    "PYI",
    # flake8-quotes
    "Q",
    # flake8-return
    "RET",
    # flake8-raise
    "RSE",
    # Ruff-specific rules
    "RUF",
    # flake8-bandit
    "S",
    # flake8-simplify
    "SIM",
    # flake8-slots
    "SLOT",
    # flake8-debugger
    "T10",
    # flake8-type-checking
    "TC",
    # flake8-tidy-imports
    "TID",
    # pyupgrade
    "UP",
    # pycodestyle warnings
    "W",
    # flake8-2020
    "YTT",
]
ignore = [
    # Documentation; we do not have a public Python API
    "D",
    # Asserts; we use them for typing purposes
    "S101",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-tidy-imports]
banned-module-level-imports = [
    "twisted.internet.reactor",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    # Security
    "S",
    # non-top-level import; sometimes needed in tests
    "PLC0415",
    # “magic values”, rarely a readability problem in tests
    "PLR2004",
]
"tests/sample_data/testproject/**" = [
    # relative imports; they seem more readable for this use case
    "TID252",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
